= Views

Views in Ramaze are a special category of templates.
Every Controller has various paths and rules used to find templates for views.
Lookup of the View is done when assembling an Action, but usually it is not
necessary to actually obtain an Action, alternatively an Action method can
provide a string template that is used for the rendering of the View.

== History

As a MVC framework, Ramaze used views from the very start, and the concept has
changed very little since.

Originally, Ramaze didn't have a concept of layouts, and after layouts were
added, things got messy. More about this should be said in the chapter about
layouts, but in essence layouts are now confined in their own lookup paths and
are not considered as file templates for views anymore.

At first, view file templates were located below a directory called 'template'
in the application's root directory.

This was changed over time to a 'view' directory in a move to streamline
terminology around the templating engines.

== Structure

By default, view file templates are located in a directory called 'view' in the
application root.
Nested inside this directory can be further directories, named after Controller
mappings, which contain further templates for that Controller.
The Controller mapped to '/' owns the files at the top of 'view/', but using
special invocations, it may reach inside other folders below that and use
templates located there.

The structure for a medium-sized application may look like this:

[source,txt]
--------------------------------------------------------------------------------
view
|-- contact.xhtml
|-- financial_report
|   `-- index.xhtml
|-- index.xhtml
|-- new.xhtml
|-- news
|   `-- index.xhtml
|-- portfolio
|   |-- edit.xhtml
|   |-- index.xhtml
|   `-- new.xhtml
`-- view.xhtml
--------------------------------------------------------------------------------

This gives us information about the internal structure of the application
already, there may be controllers mapped to '/', '/financial_report', '/news',
and '/portfolio', and all of these files represent a possible Action.

=== The index template

Ramaze has a convention about the naming of the '/' Action for every Controller,
which is instead called 'index' as it is quite hard to create a file called
'/.xhtml' (which would instead turn out to be a hidden file called '.xhtml'). 

So, every time you want to have a view file template that is used in requests
to, for example, '/foobar', you create a file at 'view/foobar/index.xhtml'.

=== Faking depth

If you want to make an Action for '/foobar/foo/bar/baz' but want to have the
view file template provided by the Controller mapped to '/', you can create a
file at 'view/foobar\__foo\__bar__baz.xhtml', every double-underscore is
translated into slashes. The same applies for names of methods of that
Controller.

=== Inline templates

You will find that Ramaze will try to utilize the return value of the
controller method as template if no file template was found. It does this by
calling `#to_s` on the object returned and running the resulting String through
the specified templating engine.

This kind of template is commonly called 'inline template', and it's usually
what you start out with when you write a small application.

It's very easy to sketch out ideas this way, and makes it easy to prototype
functionality in a single file.

I am sure that there will be some that don't hesitate writing even large
applications with one of the builder templating engines and they will be
content with writing their templates directly in the controller methods.

However, as your application grows, I highly recommended to separate controllers
and views to avoid a maintenance nightmare.

As a rule of thumb, I start splitting if I need more than one Controller or use
more than a handful of templates. Don't take this as a rule set in stone, it's
simply my view of things, and everyone may use Ramaze as they see fit.

== Path lookup

There are a number of factors that play into the lookup of views, I will analyze
and explain them.

Ramaze provides powerful ways to change just about anything in your application,
so it is only natural that the way it looks for view templates is just a
convention by pre-configuration. After reading this section you should have
enough knowledge to make Ramaze serve your purposes.

The path to any template consists of three four parts, which I will call
'application mapping', 'application view mapping', 'controller view mapping',
and 'view file template'.

The defaults result in a path as follows.

[source,txt]
--------------------------------------------------------------------------------
application mapping: './'
application view mapping: 'view'
controller view mapping: '/controller'
view file template: 'foo.xhtml'

./view/controller/foo.xhtml
--------------------------------------------------------------------------------

The directory portions of the path may actually be each an Array of paths,
providing alternative lookup paths.
To illustrate this, take following path definition and the simple brute-force
order in which it is searched.

[source,txt]
--------------------------------------------------------------------------------
application mapping: ['app1', 'app2']
application view mapping: ['view1', 'view2']
controller view mapping: ['controller1', 'controller2']
view file template: 'foo.xhtml'

app1/view1/controller1/foo.xhtml
app1/view1/controller2/foo.xhtml

app1/view2/controller1/foo.xhtml
app1/view2/controller2/foo.xhtml

app2/view1/controller1/foo.xhtml
app2/view1/controller2/foo.xhtml

app2/view2/controller1/foo.xhtml
app2/view2/controller2/foo.xhtml
--------------------------------------------------------------------------------

Although this allows for very smart sharing of templates between controllers or
even whole applications, it is also a way to shoot yourself in the foot.
You should be fully aware of what you are doing and consider your choice
carefully.

Ramaze ships with a tool called AppGraph, which helps you by visualizing all
possible Actions in your application. This can be very valuable if you are
dealing with complex lookup patterns, especially if you are dealing with an
application you didn't write yourself or when aggregating different
applications.

== Configuration

The paths for view file template lookup can be easily modified.
Every Ramaze App allows you to configure it's own paths as well, without
affecting other applications in your site.

The following example should give you a quick overview of the path looked up for
a specific Controller.

[source,ruby]
--------------------------------------------------------------------------------
include::source/views/configuration/possible_paths_for.xmp[tabsize=2]
--------------------------------------------------------------------------------

=== Global configuration

The default values for the 'application mapping' and 'application view mapping'
are:

[source,ruby]
--------------------------------------------------------------------------------
include::source/views/configuration/global.xmp[tabsize=2]
--------------------------------------------------------------------------------

They will be inherited into every new Application.

If you change these defaults, it will also affect any application that didn't
specify their own paths, so watch out for that.

=== Controller configuration

There is one method to manipulate the 'controller view mapping' called
`map_views`.

Please do not use absolute paths, all paths in the 'controller view mapping' are
relative to the 'application view mapping', which in turn is relative to the
'application mapping'.

[source,ruby]
--------------------------------------------------------------------------------
include::source/views/configuration/map_views.xmp[tabsize=2]
--------------------------------------------------------------------------------

== Content representations

As if the above wasn't enough already, Ramaze also offers you ways to present
your content in different ways for different requests, in Ramaze this
functionality is called 'provides'.

Relevant to the lookup of provides is the filename extension of your view file
template.
We will deal with this in more depth in the chapter about content
representations, for now you don't have to care about it.
