= Sessions

== What are sessions

The term session is used for data associated with a specific client (browser).
The most common way is to send a cookie to the browser, which sends it back on
every request.
This enables us to keep client state between requests.

Sessions are an essential part of most dynamic web applications, so Ramaze
tries to make it as comfortable as possible to use them to their full
potential.

In this chapter we will see how and when sessions are initialized, and how you
can use them in your Controllers, Views, and Models.
We will also go into some of the lower-level parts in Rack, which will show you
how you can manage cookies yourself, which might make sense in very
lightweight applications.

As usual, we start with a small example before we dive deeper.

== Usage example

In this example we show you how to use sessions within the Controller, this is
the most common usage and essential for further understanding.

The example consists of a very simple counter, every time someone visits your
site for the first time, it goes up, but it will not increase on subsequent
visits. This is usually called a counter for unique page views.

[source,ruby]
--------------------------------------------------------------------------------
include::source/session/counter.rb[tabsize=2]
--------------------------------------------------------------------------------

So, before every action, we call `count_visit`, which checks whether a specific
value is set in the session associated with the client making the request.
If you are using a normal browser, with cookies enabled, you will always get
'You are visitor number 1'. However, if you disable cookies, or delete the
cookie associated with localhost, or make a request with another browser (or
curl), the counter will increase further.

So to cheat and increase your counter you can simply write a script that just
doesn't send a cookie back to the client like following.

[source,ruby]
--------------------------------------------------------------------------------
include::source/session/counter_cheat.rb[tabsize=2]
--------------------------------------------------------------------------------

There are some ways to close this loophole, but for now I'll leave that as an
exercise for the reader.

== Access

You may access the session for the currently active request from anywhere in
your application, either via `Trinity` or by calling `Ramaze::Current.session`.

This will come in handy, for example if you need to obtain the currently active
language for a user, or to determine whether the user has certain privileges in
your Model.

As for all things related to `Trinity`, be aware that you will not be able to
have access to the session if you are in another thread as Ramaze uses threads
to contain state about the request/response cycle.

If you want to carry over state into a background job you have to use
`Ramaze.defer` like following:

[source,ruby]
--------------------------------------------------------------------------------
class Register < Ramaze::Controller
  def register
    # assume we register a new user here

    session[:email] = user.email
    session[:username] = user.name

    Ramaze.defer{
      mail(session[:email], session[:username], 'Welcome')
    }
  end
end
--------------------------------------------------------------------------------

This will spawn a new Thread, and copy all thread variables over, so Ramaze
will know which request/response cycle spawned the Thread and can access all of
the state.


== Cookies

Before we dive deeper into sessions we will have to understand cookies.

HTTP cookies are small text files containing data used by websites, and are
stored on the user's computer.

Cookies are set when the server sends a 'Set-Cookie' header in a response.
Afterwards, the exact data the server sent is transmitted back to the server as
the value of the 'HTTP_COOKIE' in every request the client makes.

=== History

HTTP cookies have a long history back to the beginnings of the WWW, they were
used in other contexts for applications before, but only after adoption in
Netscape and Internet Explorer they opened a vast potential for
web-applications as we know them today where state plays a major role.

[quote, Wikipedia, HTTP_cookie]
____________________________________________________________________
The term "HTTP cookie" derives from "magic cookie", a packet of data a program
receives but only uses for sending it again, possibly to its origin, unchanged.
Magic cookies were already used in computing when Lou Montulli had the idea of
using them in Web communications in June 1994.
At the time, he was an employee of Netscape Communications, which was
developing an e-commerce application for a customer.
Cookies provided a solution to the problem of reliably implementing a virtual
shopping cart.

Together with John Giannandrea, Montulli wrote the initial Netscape cookie
specification the same year. Version 0.9beta of Mosaic Netscape, released on
October 13, 1994, supported cookies.
The first actual use of cookies (out of the labs) was made for checking whether
visitors to the Netscape Web site had already visited the site.
Montulli applied for a patent for the cookie technology in 1995; it was granted in 1998.
Support for cookies was integrated in Internet Explorer in version 2, released
in October 1995.

The introduction of cookies was not widely known to the public, at the time.
In particular, cookies were accepted by default, and users were not notified of
the presence of cookies.
Some people were of the existence of cookies as early as the first quarter of
1995, but the general public learned about them after the Financial Times
published an article about them on February 12, 1996.
In the same year, cookies received a lot of media attention, especially because
of potential privacy implications.
Cookies were discussed in two U.S. Federal Trade Commission hearings in 1996 and 1997.

The development of the formal cookie specifications was already ongoing. In
particular, the first discussions about a formal specification started in April
1995 on the www-talk mailing list.
A special working group within the IETF was formed.
Two alternative proposals for introducing state in HTTP transactions had been
proposed by Brian Kristol himself, soon decided to use the Netscape
specifications as a starting point.
On February 1996, the working group identified third-party cookies as a
considerable privacy threat.
The specification produced by the group was eventually published as RFC 2109 in
February 1997.
It specifies that third-party cookies were either not allowed at all, or at
least not enabled by default.

At this time, advertising companies were already using third-party cookies.
The recommendation about third-party cookies of RFC 2109 was not followed by
Netscape and Internet Explorer.
RFC 2019 was followed by RFC 2965 in October 2000.
____________________________________________________________________

=== Structure

Let's inspect the headers sent back when we try to access the 'index' action
from the example above.

[source,ruby]
--------------------------------------------------------------------------------
delta ~ % curl -I localhost:7000/
HTTP/1.1 200 OK 
Content-Length: 24
Content-Type: text/html
Server: WEBrick/1.3.1 (Ruby/1.9.2/2009-03-02)
Date: Thu, 02 Apr 2009 11:17:15 GMT
Connection: Keep-Alive
Set-Cookie: innate.sid=d686bd7b9a4b4b8ccc2cf5b1d4f6a47d315ef375acb91a73caa34a825cf19f1b; path=/; expires=Tue, 19-Jan-2038 03:14:07 GMT
--------------------------------------------------------------------------------

You see that Ramaze sends the 'Set-Cookie' header automatically because we try
to store data in the session in our Controller.

The value of the 'Set-Cookie' header consists of `key=value` pairs, where value
usually contains following elements:

|===============================================================================
| domain   | Domain that set the cookie
| path     | Relative path below which the cookie is used
| expires  | Point in time when the cookie expires. If no time is given then
             the cookie will be deleted once the browser closes.
| secure   | *TODO*
| HttpOnly | *TODO*
|===============================================================================

=== Usage

Now that we have a better knowledge of what cookies are and what they are
supposed to do, let's see how to use them within Ramaze.

[source,ruby]
--------------------------------------------------------------------------------
include::source/session/cookie.rb[tabsize=2]
--------------------------------------------------------------------------------

In this example we don't count unique page views, but rather keep track of the
number of visits a single browser has made so far.

We are using methods provided by Rack, you can find them in `Rack::Request` and
`Rack::Response`.
Ramaze uses the same methods to set cookies for sessions.

`Rack::Respone#set_cookie` also allows a Hash as argument for the additional
key/value pairs that we showed above.

[source,ruby]
--------------------------------------------------------------------------------
include::source/session/set_cookie.rb[tabsize=2]
--------------------------------------------------------------------------------

NOTE: The only required argument is `:value`, all the others are optional and the
      cookie is valid without them.

Usually you won't need to care about cookies at all, and excessive usage of
them is considered bad practice.

=== Limitations

There are several limitations imposed on cookies.

According to the HTTP cookie specifications, browsers should be able to store a
minimal amount of cookies. In particular, an internet browser is expected to be
able to store at least 300 cookies of four kilobytes each, and at least 20
cookies per server or domain.

Since around 2007, all major browsers store around 30-50 cookies per domain.
But the size of each cookie still has severe limitations, Internet Explorer for
example will limit the total size of all cookies for one domain to 4 kilobytes.

So it makes sense to utilize Sessions instead of a large amount of cookies if
you want to store arbitrary amounts of data without worrying about it, all that
is stored on the client is an UUID that associates their cookie with data
stored on the server.


== Configuration of session cookies

Now that we have a better understanding about cookies, let's investigate the
way Ramaze utilizes cookies for the session, in particular how to change the
default behaviour through configuration.

The configuration for sessions is kept at `Ramaze::Session.options`, which is
also reachable through `Ramaze.options.session`.

The defaults are:

|===============================================================================
| Key for the session cookie   | `:key`     | 'innate.sid'
| Domain the cookie relates to | `:domain`  | `false`
| Path the cookie relates to   | `:path`    | '/'
| Use secure cookie            | `:secure`  | `false`
| Time of cookie expiration    | `:expires` | Tue Jan 19 12:14:07 +0900 2038
|===============================================================================

Please note that there is no way (yet) to disable sessions. If you do not want
to have them, don't use them.

This contrasts with earlier releases of Ramaze, where sessions were always
created as soon as a request was made unless you explicitly disabled sessions.

Ramaze since version 2009.04 initializes sessions in a lazy manner, only
setting a session cookie the first time you explicitly store a value in the
session. You can still try to read a value from an uninitialized session, which
simply returns nil and won't initialize a session cookie either.


=== Expiration

The most important option here might be the time of expiration.

By default Ramaze uses the highest allowed value for a Time instance on 32bit systems, which is some time in the year 2038.

The expiration time also decides the time-to-live of the server-side value of
the session, which is expired once the cookie is set to expire.

So in order to keep your server from taking up too much memory when you expect
a lot of unique visitors it is recommended to set this to a more reasonable
value depending on your application.

== Concurrency

A common problem when it comes to utilizing sessions is concurrency. If you
have more than one instance of your application running to handle requests via
a load-balancer it gets quite hard to predict which instance will handle
requests for which client, and browsers may end up having multiple active
sessions within the same application.

By default, sessions are stored in a conventional Hash that is kept in memory,
this is the fastest way and allows for arbitrary data to be kept in the session
value, such as instances of Proc or objects with a custom meta-classes.

However, this flexibility has major drawbacks when it comes to scaling your
application, so you should avoid storing anything that cannot be fully
serialized from the get-go to avoid problems down the road.

Ramaze provides multiple ways to persist your session beyond the boundaries of
your application's memory.
You may use the `Marshal`, `YAML`, `DRb`, `Memcached`, or `Sequel` caches that
ship with Ramaze or you may even create your own Cache, which is covered in
detail in the chapter about caches.

The default method of caching is in-memory, in a conventional Hash.
To change this, you have to modify the options at `Ramaze::Cache.options`, also
available at `Ramaze.options.cache`.

For example, to persist sessions to the different caches (useful if you want to
share them between multiple instances), you can do following:

[source,ruby]
--------------------------------------------------------------------------------
# Using Marshal serialization to the file-system
Ramaze.options.cache.session = Ramaze::Cache::Marshal

# Using YAML serialization to the file-system
Ramaze.options.cache.session = Ramaze::Cache::YAML

# Using DRb serialization to a shared object
Ramaze.options.cache.session = Ramaze::Cache::DRb

# Using Memcached serialization to a cloud of shared servers
Ramaze.options.cache.session = Ramaze::Cache::Memcached

# Using Sequel serialization to the file-system
Ramaze.options.cache.session = Ramaze::Cache::Sequel
--------------------------------------------------------------------------------

Each of these cache back-ends has unique strengths and weaknesses, please read
more about them in the chapter about caches.

== Flash

The session flash has nothing to do with Adobe Flash (R).

It is best described as a special-purpose Hash that expires parts of it's
contents after every request/response cycle.

The purpose of this functionality might be best explained as a way to display the results of some action a user invokes in the action coming after it.

So let's say an user tries to access a restricted area, and you simply want to
redirect the user elsewhere, displaying a message that the access was denied.

[source,ruby]
--------------------------------------------------------------------------------
class RestrictedArea < Ramaze::Controller
  def index
    do_some_important_stuff
  end

  before_all do
    unless user_is_privileged?
      session[:error_message] = "Access denied"
      redirect_referer
    end
  end
end

class NormalArea < Ramaze::Controller
  def index
    %q(
<?r if error_message = session.delete(:error_message) ?>
  <div class="error">#{h error_message}</div>
<?r end ?>
#{a('restricted area', RestrictedArea.r)}
    )
  end
end
--------------------------------------------------------------------------------

Given that the user clicks the link in `NormalArea` and tries to access
`RestrictedArea`, an error message will be displayed after the redirect, and
the message is deleted from the session so it will not show up on the next
request.

Flash basically automates the deletion, and acts as a short-term memory, so you
never have to remember to delete the contents.

Using the default helper, `Helper::Flash`, our example would look like this:

[source,ruby]
--------------------------------------------------------------------------------
class RestrictedArea < Ramaze::Controller
  def index
    do_some_important_stuff
  end

  before_all do
    unless user_is_privileged?
      flash[:error] = "Access denied"
      redirect_referer
    end
  end
end

class NormalArea < Ramaze::Controller
  def index
    %q(
#{flashbox}
#{a('restricted area', RestrictedArea.r)}
    )
  end
end
--------------------------------------------------------------------------------

It might not be shorter in this case, but over a larger application this
simplicity comes in handy.

Ramaze also ships with a `Helper::Flash#flashbox`, which automates the display
of flash messages as  they are used in this example.

The output of flashbox looks like this:

[source,html]
--------------------------------------------------------------------------------
<div class="flash" id="flash_error">Access denied</div>
--------------------------------------------------------------------------------

Also, this default representation can be changed easily, but more about this in
the section about the flash helper.

=== Implementation

The implementation of flash functionality is quite simple, when you are
accessing `Session#flash`, a Hash will be stored in `session[:FLASH]`. This is
the location where all key/value pairs you assign to `Session#flash` will be
stored.

After every request that used a session, `Session::Flash#rotate!` will be
called and will move `session[:FLASH]` to `session[:FLASH_PREVIOUS]`.
When you inspect the flash, it will show a merged Hash consisting of `:FLASH`
and `:FLASH_PREVIOUS`, with `:FLASH` taking precedence.

This way, after two requests, values disappear forever unless reassigned.
