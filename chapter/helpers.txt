= Helpers

Helpers are modules for inclusion into, and extension of controllers or other
classes.

The distinguishing feature of helper modules is that they are expected to be in
the `Ramaze::Helper` name-space.
There is also a naming-convention of helper modules and the files they reside
in to allow automatic requiring.
These constrains allow you to use any helper without prior configuration.

== Usage

To tell Ramaze that you want to use a certain helper in your Controller, you can
simply use the `helper` method. This method takes one or more arguments, every
argument has to be the snake-cased name of a Helper module.

[source,ruby]
--------------------------------------------------------------------------------
class MainController < Ramaze::Controller
  helper :formatting

  def index
    number_format(rand)
  end
end
--------------------------------------------------------------------------------

In this case we include the `Ramaze::Helper::Formatting` module into
`MainController`. Ramaze will first require a file named
`ramaze/helper/formatting.rb`, then search the `Ramaze::Helper` name-space for
the module called `Formatting`, and eventually include it.

Equivalent behaviour can be achieved with:

[source,ruby]
--------------------------------------------------------------------------------
require 'ramaze/helper/formatting'

class MainController < Ramaze::Controller
  include Ramaze::Helper::Formatting

  def index
    number_format(rand)
  end
end
--------------------------------------------------------------------------------

But once you start using multiple helpers this becomes very verbose. So using
the `helper` method is recommended.

== Making your own

Creating helpers is simple.

[source,ruby]
--------------------------------------------------------------------------------
module Ramaze
  module Helper
    module SmileyHelper
      FACES = {
        ':)' => '/smilies/smile.gif'
        ';)' => '/smilies/twink.gif'
      }
      REGEX = Regexp.union(*FACES.keys)

      def smile(string)
        string.gsub(REGEX){ FACES[$1] }
      end
    end
  end
end
--------------------------------------------------------------------------------

Just put this into a file in the root of your application, named
'helper/smiley_helper.rb', and you can use it in your Controller with `helper
:smiley_helper`.

== Naming

Helpers have to follow a specific naming convention for the respective file they
are defined in. Ramaze will not require all helpers available on startup, since
some of them may have external dependencies that are not relevant to your
application, this also helps keeping the used memory lower.

In Ruby, a module is assigned to a constant, which should be named using
camel-case.
However, the common convention to name files after the class they contain, is to
write the same name in snake-case.
Ramaze follows these conventions, module-names are camel-case, while their
filenames are snake-case.

Ramaze will search the `Ramaze::Helper` module for module-names in a
case-insensitive manner and simply chooses the first it can find.
This means that, if you have a helper called `AB` and another one named `Ab`,
it's usually down to luck which one you will get.
The reasoning behind this behaviour is that helpers like `CGI` would be
impossible to find. We simply rely on the fact that, if you ask for the `cgi`
helper, only the first `cgi.rb` will be required, and so only one Helper
matching `/^cgi$/i` exists.

== Helper file lookup

Ramaze will search a few paths to find your helper. We well call this the Helper
PATH.
By default, there are three directories (and in this order) searched:
'./helper/', 'lib/innate/helper/', and 'lib/ramaze/helper/'.

NOTE: The paths to Innate and Ramaze helpers are in fact absolute, but since I
      don't know where they are on your machine, I simply show the known part.

You can modify the Helper PATH via the `paths` option on
`Innate::HelpersHelper`. The final '/helper' part of the path is appended on
requiring, the PATH itself only specifies the directory the '/helper' directory
is in.

// This example produces too long output, so I use an alternative way

[source,ruby]
--------------------------------------------------------------------------------
include::source/helpers/helper_file_lookup/paths.xmp[tabsize=2]
--------------------------------------------------------------------------------

== Methods during action creation

There is a clear distinction between normal modules and helper modules in the
way Ramaze treats helper modules during action creation.

Methods of helpers are not considered for actions unless they are public and
the module was added to the `Ramaze::Helper::LOOKUP` Set.

By default, this Set is empty, and you will not have to care about this too much
in your application, as the helpers that provide real actions add themselves as
needed.

Conflicts of method names in Helper and Controller will prefer the Controller,
following the same rules as Ruby inheritance. 

[source,ruby]
--------------------------------------------------------------------------------
module Ramaze
  module Helper
    module Locale
      LOOKUP << self

      def locale(name)
        session[:LOCALE] = name
      end
    end
  end
end
--------------------------------------------------------------------------------


In this example we expose the public method Locale#locale (Ruby methods are
public by default). So in your application your can just use the helper and
when the client visits the /locale/en route the session will reflect this
choice.

NOTE: Usually you will want to add a call to `redirect_referrer` in this method,
      but we keep it simple here, the actual functionality doesn't matter.

== Default helpers

Ramaze comes with a small selection of default helpers deemed essential for any
application, they are kept in the Innate source.
The major difference to non-default helpers is that you will not have to
explicitly state their usage, they will included in your Controller
automatically.

The helpers available by default are:

* Aspect
* CGI
* Flash
* Link
* Redirect
* Render
* SendFile

We will cover each of them in more detail below.

At the time of writing, there are also around 30 non-default helpers in the
Ramaze source.
Let us take a look at the most popular ones.

Some of the helpers in Ramaze add functionality to the default helpers of
Innate, I will simply cover the combined behaviour in these cases, as you are
most likely using the ones in Ramaze.

== Aspect helper

The Aspect helper provides you with functionality known from AOP (Aspect
Oriented Programming). Sometimes you just want to execute some code around the
execution of an Action without the Action being aware of it.
Examples for this include authentication, logging, persistence, and routing.

The helper provides you with four methods, symmetrical in functionality.

=== Using before_all

So you have a Controller that requires a user to be administrator in order to
be allowed to do anything.

This might look like:

[source,ruby]
--------------------------------------------------------------------------------
include::source/helpers/aspect/before_all.rb[tabsize=2]
--------------------------------------------------------------------------------

== CGI helper

The CGI helper provides shortcuts to methods commonly used to deal with
escaping and unescaping text for different contexts.

The name originated from the CGI module it utilized to provide it's
functionality.
Today there is only one method that isn't commonly used, left that calls the
CGI module.

There are four symmetric methods to deal with escaping and unescaping HTML and
URIs, and one method to escape text for usage in templates.

In common applications, the most prevalent method might be `h`, an alias for
`html_and_code_escape`.

All methods of the CGI Helper may be accessed directly as module-functions as
well.

=== Encoding text for use in URIs with url_encode

The set of allowed ASCII characters in an URI is very limited.
When you want to create an URI, you have to take special care to avoid using
characters that have special meaning and encode them properly.

For example, let's see how we can put 'Innate & Ramaze' into a query parameter
in the following IRB session:

[source,ruby]
--------------------------------------------------------------------------------
include::source/helpers/cgi/url_encode.xmp[tabsize=2]
--------------------------------------------------------------------------------

=== Decoding text from URIs with url_decode

This is simply the reverse operation of `url_encode`, so we will use the output
of the previous example as input.

[source,ruby]
--------------------------------------------------------------------------------
include::source/helpers/cgi/url_decode.xmp[tabsize=2]
--------------------------------------------------------------------------------

== Flash helper

The naming of this helper might be confusing at first, it doesn't have anything
to do with Adobe Flash (R).

It provides two methods, `flash` and `flashbox`.

The `flash` method is a shortcut to `Ramaze::Current.session.flash`, you can
find more in-depth information in the chapter about `Ramaze::Session`.


== Link helper

Linking and obtaining routes

== Redirect helper

Redirect or respond immediately

== Render helper

Render other actions
