= Tutorial introduction to Ramaze
== Installation

The easiest way to get to know Ramaze is by example, so we will start out with
that, covering installation and a few simple applications so you can get a
feel for it.

In order to use Ramaze, you will have to install it on your system.
This is usually fairly straightforward.

=== Checking for and Installing Ruby

Before we install Ramaze, we need to ensure your system has Ruby, since Ramaze
is written in the Ruby programming language.  Ruby doesn't ship by default with
most systems, so you will likely have to install it first.

Check your system for Ruby with this command:

[source,sh]
--------------------------------------------------------------------------------
$ ruby --version
--------------------------------------------------------------------------------

If you see output similar to this, you are good to go:
[source,sh]
--------------------------------------------------------------------------------
ruby 1.9.1p0 (2009-01-30 revision 21907) [i686-linux]
--------------------------------------------------------------------------------

If you see a "command not found" error, or you see a version less than 1.9,
you'll need to install or upgrade Ruby.

For this book we assume an installation of Ruby 1.9.x, which ships with
RubyGems, the package manager for Ruby libraries and applications.

The reasoning behind using 1.9.x is that this book might take some time to get
finished, and by then I hope that all major development in Ruby will happen on the
basis of the 1.9 spec.

For some reason people have the impression that Ramaze will only work on 1.9,
we still keep it backwards-compatible to 1.8.6 for some time.

Linux users can generally use their package manager to install Ruby. Otherwise,
you can obtain Ruby from {ruby-lang}, where you will find instructions for
installation on most systems.


=== Installing Ramaze

Once Ruby is installed correctly, you can install Ramaze simply by:

[source,sh]
--------------------------------------------------------------------------------
$ gem install ramaze
--------------------------------------------------------------------------------

This will take care of installing all dependencies as well.
There are a lot of libraries that we will install in the course of this book,
but installing them is usually just a command away, so we defer it to when we
actually need them.

Ramaze is a project that is developed in an open manner by the community.
In order to work together we utilize git for revision control. You can obtain
your own copy of the repository if you are interested in helping the
development or simply would like to browse through the project history.
We will cover this subject in {ch-developing}.

== Hello, World!

A short introductory example is always "Hello world". In Ramaze this looks like
following.

[source,ruby]
--------------------------------------------------------------------------------
include::source/tutorial_introduction/hello_world.rb[tabsize=2]
--------------------------------------------------------------------------------

First we require RubyGems, the package managing wrapper that allows us to
require the ramaze library and framework. Next we define a Controller and
method that will greet us when accessing 'http://localhost:7000/', `7000` being
the default port of Ramaze.

To start this application we can now simply:

[source,sh]
--------------------------------------------------------------------------------
$ ruby start.rb
--------------------------------------------------------------------------------

That will start an instance of Ruby and start the WEBrick HTTP server that
ships with Ruby.

This will output something along the lines of:

[source,txt]
--------------------------------------------------------------------------------
include::source/tutorial_introduction/start_output.txt[tabsize=2]
--------------------------------------------------------------------------------

Now you can open your browser, and go to http://localhost:7000/.

Sometimes you will get an error when starting Ramaze that looks like:

[source,txt]
--------------------------------------------------------------------------------
include::source/tutorial_introduction/start_eaddrinuse.txt[tabsize=2]
--------------------------------------------------------------------------------

This means that you already have a server running on this port, and you will
have to use another port to run your application or shutdown the application
occupying the port.

If you don't know what is running on this port, you can find out by using the
'netstat' command.

The invocation of 'netstat' differs on Windows an Linux, we'll show Linux first.

[source,txt]
--------------------------------------------------------------------------------
delta ~ % netstat -lntp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:7000            0.0.0.0:*               LISTEN      11910/ruby
--------------------------------------------------------------------------------

With this information you know the Process ID, and can, for example `kill
11910` (send TERM signal to the process) or `pkill ruby` (send TERM signal to
all ruby processes) on Linux.

On Windows, 'netstat' has to be called like this:

[source,txt]
--------------------------------------------------------------------------------
C:\> netstat -a -b -o -p TCP
Active Connections
 Proto  Local Address          Foreign Address        State           PID
 TCP    localhost:7000         localhost:0            LISTENING       17806 [ruby.exe]
--------------------------------------------------------------------------------

Now you can use `taskkill /PID 17806` or `taskkill /IM <process_name>` to get rid of this process.


== The ramaze command

Ramaze ships with an executable called 'ramaze'.
This little tool helps you creating, controlling, and debugging your
applications.
The executable was created by the {rubyists}, most prominently TJ Vanderpoel.

It tightly integrates with both Ramaze and the Rack executable 'rackup', so you
will be able to take advantage of both.

From now on we will call the 'ramaze' executable 'bin/ramaze', that's what it
is commonly called in the Ramaze community as well.

Many commands of 'bin/ramaze' rely on a so-called pidfile, which is a tiny file
that only contains the process-ID of a currently running Ramaze application.
The name of this file defaults to the name of the directory your application is
in, suffixed with '.pid'.
So if you made an application called 'blog' in a 'blog' directory, the pidfile
will be called 'blog.pid'.
If you see such a file, it usually means that the application is already
running in the background.
You can see whether that is the case:

[source,sh]
--------------------------------------------------------------------------------
delta ~ramaze/blog % ps `cat blog.pid`
  PID TTY      STAT   TIME COMMAND
32578 ?        SNl    0:00 /usr/bin/ruby /home/manveru/bin/rackup config.ru -P blog.pid -D
--------------------------------------------------------------------------------

Future versions of `bin/ramaze` might provide a `ramaze status` command, that
will show you similar information.

=== Create

To create a new application with a basic set of files and directories that get
you started in no time, we just have to issue a single command.

`ramaze create PROJECT` creates a new prototype Ramaze application in a directory named
'PROJECT' in the current directory.
`ramaze create foo` would make './foo' containing an application prototype.
Rack options are meaningless here.

[source,sh]
--------------------------------------------------------------------------------
$ ramaze create blog
--------------------------------------------------------------------------------

What it does is simply copying a bunch of files from 'lib/proto' in the ramaze
library to the argument given. So you will end up with a new directory called
'blog' which contains a bunch of files.

The contents of this directory are:

[source,txt]
--------------------------------------------------------------------------------
include::source/tutorial_introduction/ramaze_create_contents.txt[tabsize=2]
--------------------------------------------------------------------------------

We will take a look at these files and their purpose soon, but first we'll
cover other commands of 'bin/ramaze'.

=== Start

Start an instance of your application with `ramaze start`.
Supply a pidfile name if you do not want it to use the default (PROJECT.pid).

[source,sh]
--------------------------------------------------------------------------------
$ ramaze start
--------------------------------------------------------------------------------

To start your application in the background you should daemonize it with the
`-D` argument. This will put the PID of the instance into the pidfile.
Please note that this is not available on Windows, because of limitations of
the platform.

[source,sh]
--------------------------------------------------------------------------------
$ ramaze start -D
--------------------------------------------------------------------------------

=== Stop

Stop a running instance of this application with `ramaze stop`.
Supply a pidfile name if you started it with a pidfile other than the default
(PROJECT.pid).

=== Restart

Stop a running instance of this application, then starts it back up with
`ramaze restart`.
Pidfile (if supplied) is used for both stop and start.

[source,sh]
--------------------------------------------------------------------------------
$ ramaze restart -D
--------------------------------------------------------------------------------

=== Console

Starts an irb console with app.rb (and irb completion) loaded. This command
ignores rack options.
At the moment, you will have to call `Ramaze.setup_dependencies` after starting
the session to get full functionality, as it will not actually start your
application, this should be fixed in the future.
We might add support for hooking into an already running application (as that
would be vastly superior for live debugging).

[source,sh]
--------------------------------------------------------------------------------
$ ramaze console
--------------------------------------------------------------------------------

An example session:

[source,ruby]
--------------------------------------------------------------------------------
MainController.instance_methods(false)
self
# main
Ramaze.setup_dependencies
# [Innate::Cache, Innate::Node, Ramaze::Controller, Ramaze::Plugin]
MainController.instance_methods(false)
Ramaze::Mock.get('/notemplate').headers
# {"Content-Type"=>"text/html", "Content-Length"=>"994"}
Ramaze::Mock.get('/notemplate').status
# 200
--------------------------------------------------------------------------------
